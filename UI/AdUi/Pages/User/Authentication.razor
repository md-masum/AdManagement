@page "/authentication/{action}"
@using AdCore.Constant

<RemoteAuthenticatorView Action="@Action" OnLogInSucceeded="OnLogInSucceeded" OnLogOutSucceeded="() => _js.InvokeVoid(JsInteropConstant.RemoveSessionStorage, JsInteropConstant.CurrentUserId)" />

@code{
    [Parameter] public string Action { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private async Task OnLogInSucceeded()
    {
        var user = (await AuthenticationState).User;
        if (user.Identity is {IsAuthenticated: true })
        {
            var userRoleAttribute = user.Claims.FirstOrDefault(c => c.Type.StartsWith("extension") && c.Type.EndsWith("Role"));
            if (userRoleAttribute is null)
            {
                var userId = user.FindFirst("sub")?.Value;
                _js.InvokeVoid(JsInteropConstant.SetSessionStorage, JsInteropConstant.CurrentUserId, userId);
                if (userId is not null)
                {
                    await _httpAnonymousClient.GetJsonAsync<bool>($"api/Auth/user/{userId}");
                }
            }

        }
    }
}
